153
            
    public Class getBeanType(String bean)
        throws JasperException {
        Class clazz = null;
        try {
            clazz = loader.loadClass(beanTypes.get(bean));
        } catch (ClassNotFoundException ex) {
            throw new JasperException (ex);
        }
        return clazz;
    }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

        public void accept(Visitor v) throws JasperException {
            v.visit(this);
        }

    /**
     * Prints the current indention
     */
    public void printin() {
	writer.print(SPACES.substring(0, indent));
    }

    /**
     * Prints the current indention, followed by the given string
     */
    public void printin(String s) {
	writer.print(SPACES.substring(0, indent));
	writer.print(s);
    }

    /**
     * Print a standard comment for echo outputed chunk.
     * @param start The starting position of the JSP chunk being processed. 
     * @param stop  The ending position of the JSP chunk being processed. 
     */
    public void printComment(Mark start, Mark stop, char[] chars) {
        if (start != null && stop != null) {
            println("// from="+start);
            println("//   to="+stop);
        }
        
        if (chars != null)
            for(int i = 0; i < chars.length;) {
                printin();
                print("// ");
                while (chars[i] != '\n' && i < chars.length)
                    writer.print(chars[i++]);
            }
    }

    /**
     * Prints the given string followed by '\n'
     */
    public void println(String s) {
        javaLine++;
	writer.println(s);
    }

    /**
     * Prints a '\n'
     */
    public void println() {
        javaLine++;
	writer.println("");
    }

    /**
     * Prints the current indention
     */
    public void printin() {
	writer.print(SPACES.substring(0, indent));
    }

    /**
     * Prints the current indention, followed by the given string
     */
    public void printin(String s) {
	writer.print(SPACES.substring(0, indent));
	writer.print(s);
    }

    /**
     * Prints the current indention, and then the string, and a '\n'.
     */
    public void printil(String s) {
        javaLine++;
	writer.print(SPACES.substring(0, indent));
	writer.println(s);
    }

    /**
     * Prints the given char.
     *
     * Use println() to print a '\n'.
     */
    public void print(char c) {
	writer.print(c);
    }

    /**
     * Prints the given int.
     */
    public void print(int i) {
	writer.print(i);
    }

    /**
     * Prints the given string.
     *
     * The string must not contain any '\n', otherwise the line count will be
     * off.
     */
    public void print(String s) {
	writer.print(s);
    }

    /**
     * Prints the given string.
     *
     * If the string spans multiple lines, the line count will be adjusted
     * accordingly.
     */
    public void printMultiLn(String s) {
        int index = 0;

        // look for hidden newlines inside strings
        while ((index=s.indexOf('\n',index)) > -1 ) {
            javaLine++;
            index++;
        }

	writer.print(s);
    }

    /**
     * Prints the given string followed by '\n'
     */
    public void println(String s) {
        javaLine++;
	writer.println(s);
    }

    /**
     * Prints a '\n'
     */
    public void println() {
        javaLine++;
	writer.println("");
    }

    
    // -------------------- Access informations --------------------

    public int getJavaLine() {
        return javaLine;
    }
    
    /**
     * Produces a String representing a call to the EL interpreter.
     * @param expression a String containing zero or more "${}" expressions
     * @param expectedType the expected type of the interpreted result
     * @param fnmapvar Variable pointing to a function map.
     * @param XmlEscape True if the result should do XML escaping
     * @return a String representing a call to the EL interpreter.
     */
    public static String interpreterCall(boolean isTagFile,
                     String expression,
                                         Class expectedType,
                                         String fnmapvar,
                                         boolean XmlEscape ) 
    {
        /*
         * Determine which context object to use.
         */
    String jspCtxt = null;
    if (isTagFile)
        jspCtxt = "this.getJspContext()";
    else
        jspCtxt = "_jspx_page_context";

    /*
         * Determine whether to use the expected type's textual name
     * or, if it's a primitive, the name of its correspondent boxed
     * type.
         */
    String targetType = getCanonicalName(expectedType);
    String primitiveConverterMethod = null;
    if (expectedType.isPrimitive()) {
        if (expectedType.equals(Boolean.TYPE)) {
        targetType = Boolean.class.getName();
        primitiveConverterMethod = "booleanValue";
        } else if (expectedType.equals(Byte.TYPE)) {
        targetType = Byte.class.getName();
        primitiveConverterMethod = "byteValue";
        } else if (expectedType.equals(Character.TYPE)) {
        targetType = Character.class.getName();
        primitiveConverterMethod = "charValue";
        } else if (expectedType.equals(Short.TYPE)) {
        targetType = Short.class.getName();
        primitiveConverterMethod = "shortValue";
        } else if (expectedType.equals(Integer.TYPE)) {
        targetType = Integer.class.getName();
        primitiveConverterMethod = "intValue";
        } else if (expectedType.equals(Long.TYPE)) {
        targetType = Long.class.getName();
        primitiveConverterMethod = "longValue";
        } else if (expectedType.equals(Float.TYPE)) {
        targetType = Float.class.getName();
        primitiveConverterMethod = "floatValue";
        } else if (expectedType.equals(Double.TYPE)) { 
        targetType = Double.class.getName();
        primitiveConverterMethod = "doubleValue";
        }
    }
 
    if (primitiveConverterMethod != null) {
        XmlEscape = false;
    }

    /*
         * Build up the base call to the interpreter.
         */
        // XXX - We use a proprietary call to the interpreter for now
        // as the current standard machinery is inefficient and requires
        // lots of wrappers and adapters.  This should all clear up once
        // the EL interpreter moves out of JSTL and into its own project.
        // In the future, this should be replaced by code that calls
        // ExpressionEvaluator.parseExpression() and then cache the resulting
        // expression objects.  The interpreterCall would simply select
        // one of the pre-cached expressions and evaluate it.
        // Note that PageContextImpl implements VariableResolver and
        // the generated Servlet/SimpleTag implements FunctionMapper, so
        // that machinery is already in place (mroth).
    targetType = toJavaSourceType(targetType);
    StringBuffer call = new StringBuffer(
             "(" + targetType + ") "
               + "org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate"
               + "(" + Generator.quote(expression) + ", "
               +       targetType + ".class, "
           +       "(PageContext)" + jspCtxt 
               +       ", " + fnmapvar
           + ", " + XmlEscape
               + ")");
 
    /*
         * Add the primitive converter method if we need to.
         */
    if (primitiveConverterMethod != null) {
        call.insert(0, "(");
        call.append(")." + primitiveConverterMethod + "()");
    }
 
    return call.toString();
    }

    /**
     * Compute the canonical name from a Class instance.  Note that a
     * simple replacment of '$' with '.' of a binary name would not work,
     * as '$' is a legal Java Identifier character.
     * @param c A instance of java.lang.Class
     * @return  The canonical name of c.
     */
    public static String getCanonicalName(Class c) {

        String binaryName = c.getName();
        c = c.getDeclaringClass();

        if (c == null) {
            return binaryName;
        }

        StringBuffer buf = new StringBuffer(binaryName);
        do {
            buf.setCharAt(c.getName().length(), '.');
            c = c.getDeclaringClass();
        } while ( c != null);

        return buf.toString();
    }

    public static Method getReadMethod(Class beanClass, String prop)
            throws JasperException {

        Method method = null;
        Class type = null;
        try {
            java.beans.BeanInfo info
                = java.beans.Introspector.getBeanInfo(beanClass);
            if ( info != null ) {
                java.beans.PropertyDescriptor pd[]
                    = info.getPropertyDescriptors();
                for (int i = 0 ; i < pd.length ; i++) {
                    if ( pd[i].getName().equals(prop) ) {
                        method = pd[i].getReadMethod();
                        type   = pd[i].getPropertyType();
                        break;
                    }
                }
            } else {
                // just in case introspection silently fails.
                throw new JasperException(
                    Localizer.getMessage("jsp.error.beans.nobeaninfo",
                                         beanClass.getName()));
            }
        } catch (Exception ex) {
            throw new JasperException (ex);
        }
        if (method == null) {
            if (type == null) {
                throw new JasperException(
                    Localizer.getMessage("jsp.error.beans.noproperty", prop,
                                         beanClass.getName()));
            } else {
                throw new JasperException(
                    Localizer.getMessage("jsp.error.beans.nomethod", prop,
                                         beanClass.getName()));
            }
        }

        return method;
    }
    
    /**
     * Handles taking input from TLDs
     * 'java.lang.Object' -> 'java.lang.Object.class'
     * 'int' -> 'int.class'
     * 'void' -> 'Void.TYPE'
     * 'int[]' -> 'int[].class'
     */
    public static String toJavaSourceTypeFromTld(String type) {
        if (type == null || "void".equals(type)) {
            return "Void.TYPE";
        }
        return type + ".class";
    }

    /**
     * Class.getName() return arrays in the form "[[[<et>", where et,
     * the element type can be one of ZBCDFIJS or L<classname>;
     * It is converted into forms that can be understood by javac.
     */
    public static String toJavaSourceType(String type) {

    if (type.charAt(0) != '[') {
        return type;
    }

    int dims = 1;
    String t = null;
    for (int i = 1; i < type.length(); i++) {
        if (type.charAt(i) == '[') {
        dims++;
        } else {
        switch (type.charAt(i)) {
        case 'Z': t = "boolean"; break;
        case 'B': t = "byte"; break;
        case 'C': t = "char"; break;
        case 'D': t = "double"; break;
        case 'F': t = "float"; break;
        case 'I': t = "int"; break;
        case 'J': t = "long"; break;
        case 'S': t = "short"; break;
        case 'L': t = type.substring(i+1, type.indexOf(';')); break;
        }
        break;
        }
    }
    StringBuffer resultType = new StringBuffer(t);
    for (; dims > 0; dims--) {
        resultType.append("[]");
    }
    return resultType.toString();
    }

    /**
     * Print a standard comment for echo outputed chunk.
     * @param start The starting position of the JSP chunk being processed. 
     * @param stop  The ending position of the JSP chunk being processed. 
     */
    public void printComment(Mark start, Mark stop, char[] chars) {
        if (start != null && stop != null) {
            println("// from="+start);
            println("//   to="+stop);
        }
        
        if (chars != null)
            for(int i = 0; i < chars.length;) {
                printin();
                print("// ");
                while (chars[i] != '\n' && i < chars.length)
                    writer.print(chars[i++]);
            }
    }

    // __begin lookupReadMethodMethod
    public static Object handleGetProperty(Object o, String prop)
    throws JasperException {
        if (o == null) {
            throw new JasperException(
                    Localizer.getMessage("jsp.error.beans.nullbean"));
        }
        Object value = null;
        try {
            Method method = getReadMethod(o.getClass(), prop);
            value = method.invoke(o, (Object[]) null);
        } catch (Exception ex) {
            throw new JasperException (ex);
        }
        return value;
    }
