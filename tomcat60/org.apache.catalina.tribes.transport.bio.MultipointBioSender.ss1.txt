7


    public synchronized void disconnect() {
        try {close(); }catch (Exception x){}
        setConnected(false);
    }

    public void finalize() {
        try {disconnect(); }catch ( Exception ignore){}
    }


    private synchronized void close() throws ChannelException  {
        ChannelException x = null;
        Object[] members = bioSenders.keySet().toArray();
        for (int i=0; i<members.length; i++ ) {
            Member mbr = (Member)members[i];
            try {
                BioSender sender = (BioSender)bioSenders.get(mbr);
                sender.disconnect();
            }catch ( Exception e ) {
                if ( x == null ) x = new ChannelException(e);
                x.addFaultyMember(mbr,e);
            }
            bioSenders.remove(mbr);
        }
        if ( x != null ) throw x;
    }

 
    /**
     * disconnect and close socket
     * 
     * @see DataSender#disconnect()
     */
    public  void disconnect() {
        boolean connect = isConnected();
        closeSocket();
        if (connect) {
            if (log.isDebugEnabled())
                log.debug(sm.getString("IDataSender.disconnect", getAddress().getHostAddress(), new Integer(getPort()), new Long(0)));
        }
        
    }

    public void connect() throws IOException {
        //do nothing, we connect on demand
        setConnected(true);
    }


    public synchronized void disconnect() {
        try {close(); }catch (Exception x){}
        setConnected(false);
    }

    public void remove(Member member) {
        //disconnect senders
        BioSender sender = (BioSender)bioSenders.remove(member);
        if ( sender != null ) sender.disconnect();
    }
