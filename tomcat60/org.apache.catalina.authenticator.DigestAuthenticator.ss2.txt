8


    public void setOpaque(String opaque) {
        this.opaque = opaque;
    }


    // ------------------------------------------------------- Lifecycle Methods
    
    @Override
    public void start() throws LifecycleException {
        super.start();
        
        // Generate a random secret key
        if (getKey() == null) {
            setKey(generateSessionId());
        }
        
        // Generate the opaque string the same way
        if (getOpaque() == null) {
            setOpaque(generateSessionId());
        }
        
        nonces = new LinkedHashMap<String, DigestAuthenticator.NonceInfo>() {

            private static final long serialVersionUID = 1L;
            private static final long LOG_SUPPRESS_TIME = 5 * 60 * 1000;

            private long lastLog = 0;

            @Override
            protected boolean removeEldestEntry(
                    Map.Entry<String,NonceInfo> eldest) {
                // This is called from a sync so keep it simple
                long currentTime = System.currentTimeMillis();
                if (size() > getNonceCacheSize()) {
                    if (lastLog < currentTime &&
                            currentTime - eldest.getValue().getTimestamp() <
                            getNonceValidity()) {
                        // Replay attack is possible
                        log.warn(sm.getString(
                                "digestAuthenticator.cacheRemove"));
                        lastLog = currentTime + LOG_SUPPRESS_TIME;
                    }
                    return true;
                }
                return false;
            }
        };
    }


    public void setKey(String key) {
        this.key = key;
    }


    public String getKey() {
        return key;
    }
