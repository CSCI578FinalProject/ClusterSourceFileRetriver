24


    /**
     * Callback from the cluster, when a message is received, The cluster will
     * broadcast it invoking the messageReceived on the receiver.
     * 
     * @param myobj
     *            ClusterMessage - the message received from the cluster
     */
    public void messageReceived(ClusterMessage myobj) {
        if (myobj != null && myobj instanceof SingleSignOnMessage) {
            SingleSignOnMessage msg = (SingleSignOnMessage) myobj;
            int action = msg.getAction();
	    Session session = null;
        Principal principal = null;

	    if (log.isDebugEnabled())
		log.debug("SingleSignOnMessage Received with action "
			  + msg.getAction());

	    switch(action) {
	    case SingleSignOnMessage.ADD_SESSION:
		session = getSession(msg.getSessionId(),
				     msg.getContextName());
		if (session != null)
		    clusterSSO.associateLocal(msg.getSsoId(), session);
		break;
	    case SingleSignOnMessage.DEREGISTER_SESSION:
		session = getSession(msg.getSessionId(),
				     msg.getContextName());
		if (session != null)
		    clusterSSO.deregisterLocal(msg.getSsoId(), session);
		break;
	    case SingleSignOnMessage.LOGOUT_SESSION:
		clusterSSO.deregisterLocal(msg.getSsoId());
		break;
	    case SingleSignOnMessage.REGISTER_SESSION:
            if (msg.getPrincipal() != null) {
                principal = msg.getPrincipal().getPrincipal(clusterSSO.getContainer().getRealm());
            }
            clusterSSO.registerLocal(msg.getSsoId(), principal, msg.getAuthType(),
                    msg.getUsername(), msg.getPassword());
		break;
	    case SingleSignOnMessage.UPDATE_SESSION:
            if (msg.getPrincipal() != null) {
                principal = msg.getPrincipal().getPrincipal(clusterSSO.getContainer().getRealm());
            }
            clusterSSO.updateLocal(msg.getSsoId(), principal, msg.getAuthType(),
                    msg.getUsername(), msg.getPassword());
		break;
	    case SingleSignOnMessage.REMOVE_SESSION:
		session = getSession(msg.getSessionId(),
				     msg.getContextName());
		if (session != null)
		    clusterSSO.removeSessionLocal(msg.getSsoId(), session);
		break;
	    }
	}
    }

    public SerializablePrincipal getPrincipal() {
        return principal;
    }

    public String getPassword() {
	return password;
    }

    public String getAuthType() {
	return authType;
    }

    public String getContextName() {
	return ctxname;
    }

    public int getAction() {
	return action;
    }

    public String getSessionId() {
	return sessionId;
    }

    public String getSsoId() {
	return ssoId;
    }

    public String getUsername() {
	return username;
    }

    /**
     * Each message must have a unique ID, in case of using async replication,
     * and a smart queue, this id is used to replace messages not yet sent.
     *
     * @return String
     */
    public String getUniqueId() {
	if (this.uniqueId != null)
	    return this.uniqueId;
	StringBuffer result = new StringBuffer(getSsoId());
	result.append("#-#");
	result.append(System.currentTimeMillis());
	return result.toString();
    }

    // --------------------------------------------------------- Public Methods

    /**
     * Return a String rendering of this object.
     */
    public String toString() {

        StringBuffer sb = new StringBuffer("SingleSignOnMessage[action=");
	sb.append(getAction()).append(", ssoId=").append(getSsoId());
	sb.append(", sessionId=").append(getSessionId()).append(", username=");
	sb.append(getUsername()).append("]");
        return (sb.toString());

    }
